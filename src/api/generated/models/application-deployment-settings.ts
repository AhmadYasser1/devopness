/* eslint-disable */
/**
 * devopness API
 * Devopness API - Painless essential DevOps to everyone 
 *
 * The version of the OpenAPI document: latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



/**
 * 
 * @export
 * @interface ApplicationDeploymentSettings
 */
export interface ApplicationDeploymentSettings {
    /**
     * The Id of the given group of settings
     * @type {number}
     * @memberof ApplicationDeploymentSettings
     */
    id?: number;
    /**
     * The Id of the application to which the settings apply to
     * @type {number}
     * @memberof ApplicationDeploymentSettings
     */
    application_id: number;
    /**
     * The Id of the environment to which the settings apply to
     * @type {number}
     * @memberof ApplicationDeploymentSettings
     */
    environment_id: number;
    /**
     * The Id of the optional blueprint that might contain technology stack specific settings
     * @type {number}
     * @memberof ApplicationDeploymentSettings
     */
    blueprint_id?: number;
    /**
     * The sub-domain through which the application deployed with these settings will be accessed
     * @type {string}
     * @memberof ApplicationDeploymentSettings
     */
    domain_name: string;
    /**
     * The physical path of the applicaton code/artifacts on the deployed servers
     * @type {string}
     * @memberof ApplicationDeploymentSettings
     */
    app_directory: string;
    /**
     * The version control branch that, by default, will be retrieved and deployed. This might be overriden by client apps API calls when actually triggering a new deployment.
     * @type {string}
     * @memberof ApplicationDeploymentSettings
     */
    default_branch: string;
    /**
     * The number of deployment history, logs and artifacts to keep stored in both devopness servers and user\'s servers
     * @type {number}
     * @memberof ApplicationDeploymentSettings
     */
    deployments_keep: number;
    /**
     * Indicates if at deployment time we should execute package manager command to install dependencies used in development mode
     * @type {boolean}
     * @memberof ApplicationDeploymentSettings
     */
    install_dependencies_dev: boolean;
    /**
     * Indicates if at deployment time we should execute package manager command to install dependencies used in production mode
     * @type {boolean}
     * @memberof ApplicationDeploymentSettings
     */
    install_dependencies_prod: boolean;
    /**
     * Indicates if push to deploy webhooks are enabled for this application/environment, if so code will be deployed when commited to the default_branch
     * @type {boolean}
     * @memberof ApplicationDeploymentSettings
     */
    push_to_deploy: boolean;
    /**
     * The language runtime engine version to be used to execute this application code on the deployed servers
     * @type {string}
     * @memberof ApplicationDeploymentSettings
     */
    engine_version?: string;
    /**
     * The entrypoint tells devopness how an application should be started and has basically two forms:  1) `File`: if it\'s a simple file name/path an web app will be served using the entrypoint value as its index file. Example: `index.html`  2) `Command`: if a command line instruction is provided as the entrypoint value, it will be handled as the start up command that initalizes the application. It will be assumed that the user is an advanced user that knows what she/he is doing, therefore the command specified here will be run - as is - everytime the application needs to be started. 
     * @type {string}
     * @memberof ApplicationDeploymentSettings
     */
    entrypoint: string;
    /**
     * The optional command that should be executed once during deployment to build the source code and get the application in a ready state.
     * @type {string}
     * @memberof ApplicationDeploymentSettings
     */
    build_command?: string;
    /**
     * Useful, for instance, when deploying `docker` containerized applications. If the application is not initialized by `devopness` itself, the user should inform the address at which the application listens to external calls. The address can be an IP, IP:PORT, HOSTNAME, HOSTNAME:PORT or unix:PATH
     * @type {string}
     * @memberof ApplicationDeploymentSettings
     */
    listening_address?: string;
}

